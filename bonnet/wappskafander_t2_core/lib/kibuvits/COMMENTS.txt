===========================================================================
========================  Kibuvits Ruby Library  ==========================
===========================================================================

Estonian word "kibuvits" stands for "Rosa".

For example, "Metskibuvits", which has a direct translation
of "forest rosa", stands for "Rosa majalis"(
http://en.wikipedia.org/wiki/Rosa_majalis
http://elurikkus.ut.ee/kirjeldus.php?lang=eng&id=19366&rank=70&id_puu=18622&rank_puu=60 ).

An Estonian word "mets" stands for "forest".

---------------------------------------------------------------------------
                         Table of Contents
---------------------------------------------------------------------------
1. Introduction
2. Usage
3. Library Layout
4. Dependencies
5. A few Forking Related Remarks
6. A word About Ideology

---------------------------------------------------------------------------
                         1. Introduction
---------------------------------------------------------------------------

Milestone releases of the Kibuvits Ruby Library (hereafter KRL) are
published at

http://kibuvits.rubyforge.org

Intermittent releases are part of the mmmv_devel_tools project at

https://github.com/martinvahi/mmmv_devel_tools/


The Kibuvits Ruby Library is a mixture of various Ruby routines
that I, Martin.Vahi@softf1.com, have found to be useful, handy, or
even necessary for coding in Ruby.  The KRL is licensed under
the BSD license: http://www.opensource.org/licenses/bsd-license.php

The API is not meant to stay stable. If feasible from
refactoring labor point of view, the Kibuvits Ruby Library
will be thoroughly refactored every time I find a solution
that I like more than the one I previously liked the most.
Forking the KRL is not just encouraged, but it is a necessity by design.

---------------------------------------------------------------------------
                            2. Usage
---------------------------------------------------------------------------

KRL versions are not guaranteed to be backwards compatible.
The KRL will never be distributed as a gem, because gems are global
and that would make it hard to use more than one KRL version
simultaneously in a single project.

The recommended way to reliably use more than one KRL version
in a single project is to rename strings
"Kibuvits" and "kibuvits" in all of the KRL files and file names and
folder names. Fore example, for the KRL version 1.2.0 the following
substitutions might be appropriate:

    "Kibuvits" --> "Kibuvits_1_2_0"
    "kibuvits" --> "kibuvits_1_2_0"
    "KIBUVITS" --> "KIBUVITS_1_2_0"

For automatic version checks the KRL defines a Ruby constant named
KIBUVITS_s_NUMERICAL_VERSION. The version changes with every
release and its value can be edited/read from the 

    ./src/include/kibuvits_boot.rb.

There are at least 2 ways to include the KRL into a project.

One if the ways is to declare a Ruby constant named KIBUVITS_HOME,
which is expected to be a string with a full
path to the ./ (./ is the folder that contains the COMMENTS.txt that
You are currently reading.) The other way is to set up an environment variable
named KIBUVITS_HOME, which contains a full path to the ./

All in all, every project that depends on the KRL must fork
the KRL (from the KRL trunk) and that's by design. :-)

To use the KRL, the Ruby interpreter must be run with
the options "-Ku". An example:

    ruby -Ku $KIBUVITS_HOME/src/dev_tools/run_all_kibuvits_selftests.rb

If the environment variable, KIBUVITS_HOME, has been set up properly,
then one way to include the whole KRL is:

    x=ENV["KIBUVITS_HOME"]
    require x+"/src/include/kibuvits_all.rb"

---------------------------------------------------------------------------
                        3. Library Layout
---------------------------------------------------------------------------

It is strongly encouraged to study a few lessons from
the ./doc/examples, before trying to use the KRL.
The ./doc/examples/COMMENTS.txt has further details about
the example code and the example code related prerequisites.

Sometimes some out-commented demo/test code
resides at the end of a KRL Ruby file.
In order to play with it, one may just cd into the folder,
where the Ruby file resides, uncomment the test/demo/devel code
at the end of the file and execute the file. An example:

    ruby -Ku kibuvits_str.rb

Generally code examples can be obtained from the KRL selftests.
The selftests system is explained in the
./src/dev_tools/selftests/COMMENTS.txt

---------------------------------------------------------------------------
                        4. Dependencies
---------------------------------------------------------------------------

The Kibuvits Ruby Library (KRL) is UNIX specific. The KRL will probably
stay UNIX specific, because it is comfortable to treat file paths as
strings without introducing any branching into the string
manipulation routines and rewriting Bash and some other reliable, classical,
UNIX command-line tools at an era, where most of the new commercial
software is web based and most of the web servers run UNIX-like operating
systems, is not that rewarding.

In addition to the Ruby standard library the KRL depends on
some non-standard gems that are listed in the
./src/dev_tools/install_dependency_gems.bash

---------------------------------------------------------------------------
                 5. A few Forking Related Remarks
---------------------------------------------------------------------------

As backward compatibility is not maintained, the KRL version
numbering does not have the meaning that version numbering
usually has. In stead of 1-2-3-4 the KRL versions are in a
role of ID-s, like dog-cat-cow-fly.

All of the KRL class names start with a string "Kibuvits_".
All of the KRL specific constants start with a string "KIBUVITS".
All of the KRL library files and almost all of the KRL global
functions start with a string "kibuvits_".

To combine multiple versions of the KRL in to a single
application, one must rename the "Kibuvits" and
"kibuvits" and "KIBUVITS" differently.

For example, in one version of the KRL

    "Kibuvits" -> "Kibuvits_UFOversion"
    "kibuvits" -> "kibuvits_UFOversion"
    "KIBUVITS" -> "KIBUVITS_UFOversion"

and in the other:

    "Kibuvits" -> "Kibuvits_Rocketversion"
    "kibuvits" -> "kibuvits_Rocketversion"
    "KIBUVITS" -> "KIBUVITS_Rocketversion"



---------------------------------------------------------------------------
                     6. A word About Ideology
---------------------------------------------------------------------------
The forking idea partly rests on the following
ideological points, assertions:

1) Everything starts from the motivations of people, who are involved.

2) To learn/advance, one needs to "train"/"exercise"/ at the
   edge of one's capabilities (without falling over the edge, i.e.
   without taking too heavy weights), but to work at the edge, one
   needs the freedom to be there. In the context of software
   development skills one needs creative freedom to exercise at the
   edge of one's capabilities.

3) It's not always possible to clean code up without
   dropping historical package, without breaking
   backwards compatibility.

The forking provides the private space for anyone, who
does the forking. As of 2012 I believe that in the case of
team efforts, the project must be divided to code regions,
where the code maintainer has the ultimate authority. This
does not mean that people are not allowed to cooperate voluntarily,
but it does mean that if one learns to drive a car,
one should have the option to be the only one behind the wheel.

Obviously the ideology that I just described here does not suite to
lazy and passive people, but this project is not targeted to lazy,
passive, people, nor do I (martin.vahi@softf1.com)
want to have anything to do with them.

==========================================================================
