#!/usr/bin/env ruby
#==========================================================================
# The following line is a spdx.org license label line:
# SPDX-License-Identifier: BSD-3-Clause-Clear
#--------------------------------------------------------------------------
require "pathname"

ob_pth_0=Pathname.new(__FILE__).realpath
s_fp_core=ob_pth_0.parent.parent.to_s
require(s_fp_core+"/lib/kibuvits/src/include/kibuvits_fs.rb")
require(s_fp_core+"/lib/kibuvits/src/include/kibuvits_shell.rb")
WAPPSKAFANDER_T2_VERSION="1.0.0"
#--------------------------------------------------------------------------

def s_get_value_from_project_config_t1(s_var_name,s_project_config)
   s_rgx=s_var_name+"[\\s]*=[\\s]*\"(([\\d]+)|(t|f))"
   md=s_project_config.match(s_rgx)
   s_out=$kibuvits_lc_emptystring
   return s_out if md==nil
   s_0=md[0]
   s_out=s_0[(s_0.index("\"")+1)..(-1)]
   return s_out
end # s_get_value_from_project_config_t1

def s_get_web_server_port_number(s_project_config)
   s_port_number=s_get_value_from_project_config_t1(
   "SETTING_PORT_NUMBER",s_project_config)
   return s_port_number
end # s_get_web_server_port_number

def s_get_web_server_ip_address
   if !defined? @s_get_web_server_ip_address_cache
      @s_get_web_server_ip_address_cache=Kibuvits_io.s_one_of_the_public_IP_addresses_or_a_loopback_if_unconnected
   end # if
   s_out=@s_get_web_server_ip_address_cache
   return s_out
end # s_get_web_server_ip_address


# s_param_name inSet {"ip_address", "port", "ip_address_and_port"}
def s_get_PHP_FastCGI_params(s_param_name,s_project_config)
   s_out=nil
   s_0=nil
   if !defined? @s_get_PHP_FastCGI_params_cache_port
      @s_get_PHP_FastCGI_params_cache_port=s_get_value_from_project_config_t1(
      "SETTING_PHP_FASTCGI_SERVER_PORT_NUMBER",s_project_config).freeze
   end # if
   if !defined? @s_get_PHP_FastCGI_params_cache_ip_address
      s_web_server_ip=s_get_web_server_ip_address
      if (s_web_server_ip.gsub(/[\d]/,$kibuvits_lc_emptystring)).length!=3
         s_0="::1"#."+s_php_cgi_server_port_number
      else
         s_0="127.0.0.1"
      end # if
      @s_get_PHP_FastCGI_params_cache_ip_address=s_0.freeze
   end # if
   if !defined? @s_get_PHP_FastCGI_params_cache_ip_address_and_port
      s_ip=@s_get_PHP_FastCGI_params_cache_ip_address
      if s_ip.length==3
         s_0=s_ip+"."+@s_get_PHP_FastCGI_params_cache_port
      else
         s_0=s_ip+":"+@s_get_PHP_FastCGI_params_cache_port
      end # if
      @s_get_PHP_FastCGI_params_cache_ip_address_and_port=s_0.freeze
   end # if
   case s_param_name
   when "ip_address_and_port"
      s_out=@s_get_PHP_FastCGI_params_cache_ip_address_and_port
   when "ip_address"
      s_out=@s_get_PHP_FastCGI_params_cache_ip_address
   when "port"
      s_out=@s_get_PHP_FastCGI_params_cache_port
   else
      kibuvits_throw("s_param_name=="+s_param_name+
      "\n GUID='81cea621-f6f2-4cdd-94e3-c0237030b6e7'\n\n")
   end # case s_param_name
   return s_out

   s_ip_and_port="127.0.0.1:"+s_php_cgi_server_port_number
end # s_get_PHP_FastCGI_ip_address

#--------------------------------------------------------------------------
@s_lc_fp_web_root_http_err_folder="wappskafander_t2_autogenerated_http_error_pages"

def gen_http_error_pages(s_project_config,s_fp_web_server,s_fp_web_root)
   # When updating the
   s_fp_err_folder=s_fp_web_root+$kibuvits_lc_slash+
   @s_lc_fp_web_root_http_err_folder #, don't fortet
   # to update the web server configuration file template,
   # wihich tells the server, where to look for the error files.
   # According to the "ErrorHandler =" section of the
   # http://www.hiawatha-webserver.org/manpages/hiawatha
   # the error pages must reside within the web root.
   #--------------------
   s_err=sh(" rm -fr "+s_fp_err_folder)[$kibuvits_lc_s_stderr]
   kibuvits_throw("\n"+s_err+"\n") if 0<s_err.length
   Dir.mkdir(s_fp_err_folder)
   s_fp_templates_folder=s_fp_web_server+
   "/http_error_page_templates"
   ar_fp_templates=Dir.glob(s_fp_templates_folder+"/template_*.html")
   #--------------------
   s_fp_destination=nil
   s_html=nil
   rgx=/[\d]+[.]html/
   s_dest_file_name=nil
   md=nil
   s_lc_1=s_fp_err_folder+$kibuvits_lc_slash
   ar_fp_templates.each do |s_fp_origin|
      md=s_fp_origin.match(rgx)
      if md==nil
         kibuvits_throw("\n HTTP error page files must have a name that "+
         "has a form:"+
         "\ntemplate_<HTTP error number>.html"+
         "\n"+
         "\nAn example: template_503.html "+
         "\n"+
         "\n s_fp_origin=="+s_fp_origin+
         "\n\n GUID='e30d878a-055a-4a71-9de3-c0237030b6e7'\n\n")
      end # if
      s_dest_file_name=md[0]
      s_fp_destination=s_fp_err_folder+$kibuvits_lc_slash+s_dest_file_name
      #--------
      s_html=file2str(s_fp_origin)
      #--------
      s_html.gsub!("WAPPSKAFANDER_T2_BLANK_WAPPSKAFANDER_T2_VERSION",
      WAPPSKAFANDER_T2_VERSION.to_s)
      #--------
      s_0=s_get_PHP_FastCGI_params("ip_address_and_port",s_project_config)
      s_html.gsub!("WAPPSKAFANDER_T2_BLANK_PHPFASTCGI_IP_ADDRESS_AND_PORT",s_0)
      #--------
      str2file(s_html,s_fp_destination)
   end # loop
end # gen_http_error_pages

#--------------------------------------------------------------------------

# That's actually a flawed function, because the
# hiawatha.conf accepts only a single
# "ErrorHandler =" entry in its config file,
# but if the PHP is not active, i.e. the error
# is due to the fact that the PHP is not available,
# then there is nothing that can be used for
# reading out the actual error code from the
# environment variable HTTP_GENERATED_ERROR.
#
# That is to say, the architecture of the hiawatha
# web server seems to contain a flaw.
#
# So, that explains, why this function here is
# intentionally left to be a mess, for a time being.
def s_gen_server_config_option_ErrorHandler(s_fp_web_root)
   s_out=""
   s_fp_errfolder=s_fp_web_root+$kibuvits_lc_slash+
   @s_lc_fp_web_root_http_err_folder
   ar_fp_templates=Dir.glob(s_fp_errfolder+"/*.html")
   s_0=nil
   s_err_number=nil
   rgx=/[\d]+[.]html/
   s_1=nil
   s_lc_1="ErrorHandler = "
   ar_fp_templates.each do |s_fp|
      s_0=s_fp.sub(s_fp_web_root,$kibuvits_lc_slash)
      s_err_number=(s_0.match(rgx)[0])[0..(-6)]
      s_1=s_lc_1+s_err_number+
      ($kibuvits_lc_colon+s_0+$kibuvits_lc_linebreak)
      s_out << s_1
   end # loop
   return s_out
end # s_gen_server_config_option_ErrorHandler

# http://www.hiawatha-webserver.org/manpages
def s_gen_server_config(s_fp_tmp,s_fp_web_server,
   s_fp_server_config_template,s_project_config, s_fp_web_root)
   #---------------------------
   s_server_config=file2str(s_fp_server_config_template)
   #---------------------------
   # The web server config needs the list
   # of http error message html-files, which get generated by:
   gen_http_error_pages(s_project_config,s_fp_web_server,s_fp_web_root)
   #---------------------------
   s_error_handler=$kibuvits_lc_linebreak
   s_port_number=s_get_web_server_port_number(s_project_config)
   s_req_max_duration_in_seconds=s_get_value_from_project_config_t1(
   "SETTING_REQUEST_SERVICING_MAXIMUM_DURATION_IN_SECONDS",s_project_config)
   s_req_max_size_in_kibibytes=s_get_value_from_project_config_t1(
   "SETTING_REQUEST_SIZE_MAX_IN_KIBIBYTES",s_project_config)
   s_ip_address=s_get_web_server_ip_address
   s_index_html_candidate="index.html"
   #------
   s_0=s_get_value_from_project_config_t1(
   "SETTING_SB_ENABLE_PHP5",s_project_config)
   s_php5_settings=$kibuvits_lc_emptystring
   if s_0==$kibuvits_lc_sb_true
      # The FastCGI version of the PHP5 can be started by
      #
      #     php-cgi -b 127.0.0.1:5555
      #
      s_error_handler=s_gen_server_config_option_ErrorHandler(s_fp_web_root)
      s_php_cgi_server_port_number=s_get_PHP_FastCGI_params(
      "port",s_project_config)
      s_ip_and_port=s_php_cgi_server_port_number=s_get_PHP_FastCGI_params(
      "ip_address_and_port",s_project_config)
      s_php5_settings="UseFastCGI = PHP5\n"+
      "FastCGIserver {\n"+
      "    FastCGIid = PHP5 \n"+
      "    ConnectTo = "+s_ip_and_port+" \n"+
      "    Extension = php \n"+
      ""+#    ServerRoot = "+s_fp_web_root+" \n"+
      "    SessionTimeout = "+s_req_max_duration_in_seconds+" \n"+
      "}"
      s_index_html_candidate="index.php"
   end # if
   #---------------------------
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_FP",s_fp_web_root)
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_IP_ADDRESS",s_ip_address)
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_HOSTNAME",s_ip_address)
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_PORT",s_port_number)
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_REQUEST_TIMEOUT_IN_SECONDS",s_req_max_duration_in_seconds)
   #------
   #The MaxUploadSize must be less than or equal to 100MiB
   #s_0=s_req_max_size_in_kibibytes
   #i_0=100*1024
   #s_0=i_0.to_s if i_0<s_req_max_size_in_kibibytes.to_i
   #s_server_config.gsub!(
   #"WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_REQUEST_SIZE_IN_KIBIBYTES_MAX",s_0)
   #MaxRequestSize = WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_REQUEST_SIZE_IN_KIBIBYTES_MAX
   #MaxUploadSize = WAPPSKAFANDER_T2_BLANK_MAIN_WEB_ROOT_REQUEST_SIZE_IN_KIBIBYTES_MAX
   #------
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_ENABLE_PHP5",s_php5_settings)
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_TEMPORARY_FOLDER_FOR_SERVER_TMP_FILES",s_fp_tmp)
   #------
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_CGI_ERROR_LOGFILE_PATH",s_fp_tmp+"/cgi_error_log.txt")
   #ErrorLogfile = WAPPSKAFANDER_T2_BLANK_CGI_ERROR_LOGFILE_PATH
   #------
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_INDEX_HTML_CANDIDATE_NAME",s_index_html_candidate)
   #---------------------------
   s_server_config.gsub!(
   "WAPPSKAFANDER_T2_BLANK_HTTP_ERROR_HANDLING_PAGES",s_error_handler)
   #---------------------------
   #puts s_server_config
   return s_server_config
end # s_gen_server_config


#--------------------------------------------------------------------------
s_fp_web_server=s_fp_core+"/web_server"
s_fp_web_server_etc=s_fp_web_server+"/etc"
s_fp_web_server_etc_templates=s_fp_web_server+"/etc_templates"

s_fp_server_config=s_fp_web_server_etc+"/hiawatha.conf"
s_fp_server_config_template=s_fp_web_server_etc_templates+"/hiawatha.conf"

s_fp_project_root=Pathname.new(s_fp_core).realpath.parent.parent.to_s
s_fp_project_config=s_fp_project_root+"/etc/wappskafander_t2_configuration.bash"

s_fp_web_root=s_fp_project_root+"/web_root"
s_fp_tmp=s_fp_core+"/tmp"

Dir.mkdir(s_fp_tmp,0755) if !File.exists? s_fp_tmp
#--------------------------------------------------------------------------

s_project_config=file2str(s_fp_project_config)
s_doc_part_1="\nAcceptad args: port_number | gen_server_config | ip_address"+
" | suffix_1\n\n"
if ARGV.size!=1
   kibuvits_throw("\n\nARGV.size==0,"+s_doc_part_1)
else
   s_arg=ARGV[0]
   case s_arg
   when "port_number"
      s_port_number=s_get_web_server_port_number(s_project_config)
      kibuvits_write(s_port_number)
   when "ip_address"
      s_ip_address=Kibuvits_io.s_one_of_the_public_IP_addresses_or_a_loopback_if_unconnected
      kibuvits_write(s_ip_address)
   when "suffix_1"
      s_port_number=s_get_web_server_port_number(s_project_config)
      s_ip_address=Kibuvits_io.s_one_of_the_public_IP_addresses_or_a_loopback_if_unconnected
      # The colon part is due to the possible IPv6 adresses.
      s_out=s_ip_address.gsub($kibuvits_lc_dot,$kibuvits_lc_underscore).gsub(
      $kibuvits_lc_colon,$kibuvits_lc_underscore)+"_p_"+s_port_number
      kibuvits_write(s_out)
   when "wappskafander_t2_version"
      kibuvits_write(WAPPSKAFANDER_T2_VERSION)
   when "gen_server_config"
      s_server_config=s_gen_server_config(s_fp_tmp,s_fp_web_server,
      s_fp_server_config_template,s_project_config,s_fp_web_root)
      str2file(s_server_config,s_fp_server_config)
   when "gen_http_error_pages"
      gen_http_error_pages(s_project_config,s_fp_web_server,s_fp_web_root)
   else
      kibuvits_throw("\n\nARGV[0]=="+s_arg+s_doc_part_1)
   end # case s_arg
end # if

#==========================================================================
